#include <iostream>
#include <vector>
template<typename T,int buffersize>
class CircularBuffer
{
public:
    CircularBuffer(buffersize  )
    {
        head = tail = 0;
    }
    // Добавить элемент
    ~CircularBuffer(){
        arr.clear();
    }
    void put( const int & value )
    {
        if ( tail == buffersize )
        {
            tail = 0;
        }

        arr.push_back(value);
        ++tail;
    }
    // Извлечь последний элемент
    int & pop()
    {
        if ( head == buffersize) {
            head = 0;
        }
        int & elem = arr[head];
        ++head;
        return elem;
    }
    // Кол-во элементов в буфере
    size_t size() const
    {
        return tail;
    }

    // Ёмкость буфера
    size_t capacity() const
    {
        return buffersize;
    }
    int operatorr(const int  i )
    {
        return arr[i];
    }
    void PrintBuffer(){
        std::cout<<head<<tail;
        for(int i=head; i<=tail;i++)
            std::cout<<arr[i]<<" ";
        std::cout<<std::endl;
    }
private:
    std::vector<T> arr;             // массив-буфер
    int head;              // индекс первого элемента
    int tail;              // индекс последнего элемента
};
int main()
{
    CircularBuffer <int,3>buf;
    buf.PrintBuffer();
    for( int i = 0; i < 10; ++i )
    {
        buf.put( i * 2 );
        if ( buf.size() == buf.capacity() ) {
            std::cout << "---------------" << std::endl;
            while( buf.size() ) {
                std::cout << buf.pop() << std::endl;
                buf.PrintBuffer();
            }
        }

    }
    std::cout << "---------------" << std::endl;
    while( buf.size() ) {
        std::cout << buf.pop() << std::endl;
    }
    return 0;
}
