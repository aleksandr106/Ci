#include <iostream>
#include <vector>
template<typename T,int n>
class CircularBuffer
{
public:
    std::vector<T> arr;
    CircularBuffer( )
    {
        head = tail = 0;
        std::vector <T> arr(n,7);
        std::cout<<arr[1];
    }
    // Добавить элемент
    ~CircularBuffer(){
        arr.clear();
    }
    void put( const int & value )
    {
        if ( tail == arr.capacity() )
        {
            tail = 0;
        }
        arr.push_back(value);
        ++tail;
    }
    // Извлечь последний элемент
    int & pop()
    {
        if ( head == arr.capacity()) {
            head = 0;
        }
        int & elem = arr[head];
        arr.pop_back();
        ++head;
        return elem;

    }
    // Кол-во элементов в буфере
    size_t size() const
    {
        return arr.size();
    }

    // Ёмкость буфера
    size_t capacity() const
    {
        return arr.capacity();
    }
    int operatorr(const int  i )
    {
        return arr[i];
    }
    void PrintBuffer(){
        std::cout<<head<<" "<<tail<<" ";
        for(int i=head; i<tail;++i)
            std::cout<<arr[i]<<" ";
        std::cout<<std::endl;
    }
private:
               // массив-буфер
    int head;              // индекс первого элемента
    int tail;              // индекс последнего элемента

};
int main()
{    std::vector <int> a(5);
    for( int i = 0; i < 5; ++i ){
        std::cout<<a[i];
    }
    CircularBuffer <int,3>buf;
    buf.PrintBuffer();
    for( int i = 0; i < 10; ++i )
    {
        buf.put( i * 2 );

        if ( buf.size() == buf.capacity() ) {

            std::cout << "---------------" << std::endl;
            while( buf.size() ) {
                std::cout << buf.pop() << std::endl;

            }
        }

    }
    std::cout << "---------------" << std::endl;
    while( buf.size() ) {
        std::cout << buf.pop() << std::endl;
    }

    return 0;
}
